package charts;
import java.awt.*;
import java.applet.*;
import java.awt.event.*;
import java.util.*;
import java.lang.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.*;
import java.net.*;

public class charts extends Applet {
  public int LEN;
  public String[] down_task_code;
  public String[] before_task_no;
  public int[] up_task_code;
  public int[] exist_sub_task;
  public int[] task_type;
  public String[] begin_date;
  public String[] end_date;
  //public int[] datelength;
  public int[] beginX;
  public int[] endX;
  public String[] datelist;
  public int[] down_length;
  public int[] task_is_landmark;
  public String[] resource;
  public int[] task_no;
  public String xtask_no,xbeginX,xendX,xbefore_task_no,xup_task_code,xexist_sub_task,xtask_type,xbegin_date,xend_date,xdatelength,minDate,maxDate,weekcount,xdatelist,xdown_length,xresource,xtask_is_landmark; //接收从html传进的数据
  public String[] week={"日","一","二","三","四","五","六"};
  Image img1;
  Image img2;
  Image img3;
  Image img4;
  Image img5;
  Image img6;
  Image img7;
  Image img8;
  public int cx=0;
  public int cy=0; 
  URL docur= null;	
	
  public void init() {
    //setBackground(Color.gray);
	setBackground(Color.white);
    int width=this.getBounds().width;
    int height=this.getBounds().height;
    setSize(width,height);
  }
 
  public void paint(Graphics g){
  img1=getImage(getCodeBase(),"1.gif");//任务条
  img2=getImage(getCodeBase(),"2.gif");//黑三角
  img3=getImage(getCodeBase(),"3.gif");//黑条
  img4=getImage(getCodeBase(),"4.gif");//里程碑
  img5=getImage(getCodeBase(),"jt.gif");//蓝三角 
  img6=getImage(getCodeBase(),"black.gif");//黑三角 
  img7=getImage(getCodeBase(),"jt-l.gif");//下蓝三角 
  img8=getImage(getCodeBase(),"jt-b.gif");//下黑三角 
	g.setColor(Color.black);//坐标原点(30,290)
	
	int j=0;int k=0,i=0;
	int rowwidth=20;
	int rowheight=20;
	int taskheight=10;
	int yweekcount=Integer.parseInt(weekcount);
	for(j=0;j<yweekcount;j++){
	  g.drawString(datelist[j],j*7*rowwidth+10,rowheight);
	  g.drawRect(j*7*rowwidth,0,7*rowwidth,rowheight);
	}
	
	for(j=0;j<yweekcount;j++){
	   for(k=0;k<7;k++){
	   g.drawRect(j*7*rowwidth+k*rowwidth,rowheight,rowwidth,rowheight);
	   g.drawString(week[k],j*7*rowwidth+k*rowwidth+5,2*rowheight);
	   }
	}
	
    String yybefore_task_no;
	String[] ybefore_task_no;
    int yup_task_code=0;
    int yexist_sub_task=0;
    int ytask_is_landmark=0;
	int ybeginX=0;
	int yendX=0;
	int ydown_length=0;
	int after_no=0;
	String after_type;
	String yresource="";
    String ybegin_date;
    String yend_date;
	int[] before;
	//int ydatelength;
	int add=0;
	int[] ydown_task_code;
	//g.drawString("LEN="+LEN,80,160);
	for(j=0;j<LEN;j++){
	   yybefore_task_no=before_task_no[j];
	   ybefore_task_no=Substr3(yybefore_task_no);
	   yexist_sub_task=exist_sub_task[j];
	   ytask_is_landmark=task_is_landmark[j];
	   ybeginX=beginX[j];
	   yendX=endX[j];
	   k=j+2;
	   if(yexist_sub_task==1){
         //g.drawImage(img3,ybeginX*rowwidth-rowwidth/2,k*rowheight,(yendX-ybeginX+1)*rowwidth+rowwidth,rowheight/2,null);
         g.setColor(Color.black);
		 g.drawRect(ybeginX*rowwidth-rowwidth/2,k*rowheight,(yendX-ybeginX+1)*rowwidth+rowwidth,rowheight/2);
		 g.fillRect(ybeginX*rowwidth-rowwidth/2,k*rowheight,(yendX-ybeginX+1)*rowwidth+rowwidth,rowheight/2);
		 g.drawImage(img2,ybeginX*rowwidth-rowwidth/2,k*rowheight+rowheight/2,null);
	     g.drawImage(img2,(yendX+1)*rowwidth,k*rowheight+rowheight/2,null);
	   }else{
	     if(ytask_is_landmark==0){
		   g.setColor(Color.blue);
		   g.drawRect(ybeginX*rowwidth,k*rowheight,(yendX-ybeginX+1)*rowwidth,taskheight);
           g.fillRect(ybeginX*rowwidth,k*rowheight,(yendX-ybeginX+1)*rowwidth,taskheight);
		 }else{
		    g.setColor(Color.black);
		    g.drawImage(img4,ybeginX*rowwidth-rowheight/2,k*rowheight,null);
			//g.drawString(ybegin_date.substring(5,10),ybeginX*rowwidth-rowheight/2+15,k*rowheight+10);
			/*if(ydown_task_code.length>0 && ydown_task_code[0]>0){
			  g.drawLine((ybeginX)*rowwidth+ydown_length,k*rowheight+taskheight/2,(yendX+1)*rowwidth+ydown_length,k*rowheight+taskheight/2);
		    */
		 }
		}
		if(ybefore_task_no.length>0 && !ybefore_task_no[0].equals("0")){
		  for(i=0;i<ybefore_task_no.length;i++){
		    after_type=ybefore_task_no[i].substring(0,2);
			after_no=Integer.parseInt(ybefore_task_no[i].substring(2,ybefore_task_no[i].length()));
			before=get_before_task(j,after_no);
			g.setColor(Color.blue);
			if(before[0]>-1){
			  if(after_type.equals("FS")){//如果是FS类型
			    if(yexist_sub_task==1){//如果是摘要任务
				   g.setColor(Color.black);//设置颜色为黑色
				   if(before[1]-yendX==1){
				      g.drawLine((yendX+1)*rowwidth+rowwidth/2,k*rowheight+taskheight/2,before[1]*rowwidth+rowwidth/4,k*rowheight+taskheight/2);
				   }else{
				     if(before[3]==1 && before[0]-j<0){
					    g.drawLine((yendX+1)*rowwidth+rowwidth/2,k*rowheight+taskheight/2,before[1]*rowwidth-rowwidth/2,k*rowheight+taskheight/2);
					 }else{
				        g.drawLine((yendX+1)*rowwidth+rowwidth/2,k*rowheight+taskheight/2,before[1]*rowwidth,k*rowheight+taskheight/2);
					  }
				   }
				}else{
				  g.setColor(Color.blue);
				  if(before[1]-yendX==1){
				    g.drawLine((yendX+1)*rowwidth,k*rowheight+taskheight/2,before[1]*rowwidth+rowwidth/4,k*rowheight+taskheight/2);
				  }else{
				    if(before[3]==1 && before[0]-j<0){
					  g.drawLine((yendX+1)*rowwidth,k*rowheight+taskheight/2,before[1]*rowwidth-rowwidth/2,k*rowheight+taskheight/2); 
					}else{
				      g.drawLine((yendX+1)*rowwidth,k*rowheight+taskheight/2,before[1]*rowwidth,k*rowheight+taskheight/2);
				    }
				  }
				}
				if(before[0]-j>=0){
			       if(before[1]-yendX==1){
				      g.drawLine(before[1]*rowwidth+rowwidth/4,k*rowheight+taskheight/2,before[1]*rowwidth+rowwidth/4,(before[0]+2)*rowheight+taskheight);
					  if(yexist_sub_task==1){
					   g.drawImage(img6,before[1]*rowwidth,(before[0]+2)*rowheight-taskheight/2,null);
					 }else{
					   g.drawImage(img5,before[1]*rowwidth,(before[0]+2)*rowheight-taskheight/2,null);
					 }
				   }else{
				     g.drawLine(before[1]*rowwidth,k*rowheight+taskheight/2,before[1]*rowwidth,(before[0]+2)*rowheight+taskheight);
				     if(yexist_sub_task==1){
					   g.drawImage(img6,before[1]*rowwidth-rowwidth/4,(before[0]+2)*rowheight-taskheight/2,null);
					 }else{
					   g.drawImage(img5,before[1]*rowwidth-rowwidth/4,(before[0]+2)*rowheight-taskheight/2,null);
					 }
				   }
		        }else{
				   if(before[1]-yendX==1){
				        g.drawLine(before[1]*rowwidth+rowwidth/4,k*rowheight+taskheight/2,before[1]*rowwidth+rowwidth/4,(before[0]+2)*rowheight+taskheight);
					 if(yexist_sub_task==1){
					    g.drawImage(img8,before[1]*rowwidth,(before[0]+2)*rowheight+taskheight/2+5,null);
					 }else{
					    g.drawImage(img7,before[1]*rowwidth,(before[0]+2)*rowheight+taskheight/2+5,null);
					  }
				   }else{
				      if(before[3]==1 && before[0]-j<0){
					    g.drawLine(before[1]*rowwidth-rowwidth/2,k*rowheight+taskheight/2,before[1]*rowwidth-rowwidth/2,(before[0]+2)*rowheight+taskheight);
					  }else{
					    g.drawLine(before[1]*rowwidth,k*rowheight+taskheight/2,before[1]*rowwidth,(before[0]+2)*rowheight+taskheight);
					  }
				      if(yexist_sub_task==1){
					    if(before[3]==1 && before[0]-j<0){
						  g.drawImage(img8,before[1]*rowwidth-rowwidth/2-rowwidth/4,(before[0]+2)*rowheight+taskheight/2+5,null);
						}else{
						  g.drawImage(img8,before[1]*rowwidth-rowwidth/4,(before[0]+2)*rowheight+taskheight/2+5,null);
						}
				      }else{
					    if(before[3]==1 && before[0]-j<0){
						  g.drawImage(img7,before[1]*rowwidth-rowwidth/2-rowwidth/4,(before[0]+2)*rowheight+taskheight/2+5,null);
						}else{
					      g.drawImage(img7,before[1]*rowwidth-rowwidth/4,(before[0]+2)*rowheight+taskheight/2+5,null);
						}
					  }
				   }
			    }
			  }
			  /*if(after_type.equals("FF")){
			    g.drawLine((yendX)*rowwidth,k*rowheight+taskheight/2,before[2]*rowwidth+rowwidth/2,k*rowheight+taskheight/2);
				g.drawLine(before[2]*rowwidth+rowwidth/2,k*rowheight+taskheight/2,before[2]*rowwidth+rowwidth/2,(before[0]+2)*rowheight);
				if(before[0]-j>=0){
			       g.drawImage(img5,before[2]*rowwidth+rowwidth/4,(before[0]+2)*rowheight-taskheight/2,null);
		        }else{
			       g.drawImage(img7,before[2]*rowwidth+rowwidth/4,(before[0]+2)*rowheight+taskheight/2+5,null);
			    }
			  }*/
			}
		  }
	    }
	  }
   }
   
  public static int[] Substr1(String str){
    int I=0;
    StringTokenizer st = new StringTokenizer(str,",");
    int len=st.countTokens();
    int[] val=new int[len];
    while(st.hasMoreTokens()) {
      val[I]=Integer.parseInt(st.nextToken());
      I++;
    }
    return val;
  }
 
  public static String[] Substr2(String str){
    int I=0;
    StringTokenizer st = new StringTokenizer(str,",");
    int len=st.countTokens();
    String[] val=new String[len];
    while(st.hasMoreTokens()) {
      val[I]=(String)st.nextToken();
      I++;
    }
    return val;
  }
  
   public static String[] Substr3(String str){
    int I=0;
    StringTokenizer st = new StringTokenizer(str,"&");
    int len=st.countTokens();
    String[] val=new String[len];
    while(st.hasMoreTokens()) {
      val[I]=(String)st.nextToken();
      I++;
    }
    return val;
  }

  public  int[] get_before_task(int taskno,int before_taskno){
     int I=0;
	 int[] val=new int[4];
	 val[0]=-1;
	 val[1]=0;
	 val[2]=0;
	 val[3]=0; 
	 if(taskno<before_taskno){
	   for(I=taskno;I<LEN;I++){
	     if(task_no[I]==before_taskno){
		   val[0]=I;
		   val[1]=beginX[I];
		   val[2]=endX[I];
		   val[3]=exist_sub_task[I];
		   break;
		 }
	   }
	  }else{
	    for(I=taskno;I>0;I--){
	     if(task_no[I]==before_taskno){
		   val[0]=I;
		   val[1]=beginX[I];
		   val[2]=endX[I];
		   val[3]=exist_sub_task[I];
		   break;
		 }
	   }	  
	  }		   
	 return val; 
  }
 
  public static int getMaxVal(int[] Maxval){
    int I,result;
    result=Maxval[0];
    for(I=0;I<Maxval.length;I++){
 if(result<Maxval[I])
   result=Maxval[I];
    }
    return result;
  }
  public static int getMinVal(int[] Minval){
    int I,result;
    result=Minval[0];
    for(I=0;I<Minval.length;I++){
 if(result>Minval[I])
          result=Minval[I];
    }
    return result;
  }
  
   public void setParameter(String task_no,String beginX,String endX,String before_task_no,String exist_sub_task,String task_is_landmark,String datelist,String weekcount){
        this.xtask_no=task_no;
		this.xbeginX=beginX;
		this.xendX=endX;
		this.xbefore_task_no=before_task_no;
		this.xexist_sub_task=exist_sub_task;
		this.xtask_is_landmark=task_is_landmark;
		this.xdatelist=datelist;
		this.weekcount=weekcount;
		this.task_no=Substr1(task_no);
        this.beginX=Substr1(beginX);
	    this.endX=Substr1(endX);
        this.before_task_no=Substr2(before_task_no);
		this.exist_sub_task=Substr1(exist_sub_task);
	    this.task_is_landmark=Substr1(task_is_landmark);
	  	this.datelist=Substr2(datelist);
    	this.LEN=this.task_no.length;
  }
 }


